1.Created venv added interpreter / gitignore / license / readme.md
2.Created structure and added raw data.
3.Creating file connect.py to establish connection with DB.
4.Adding data_processing.py to clean the columns
5.Set main to export csv data to postgreSQL.

Main goals:
Task 1: PostgreSQL – Clean & Structure the Dataset
Goal inside Pycharm: Make the dataset clean, have only necessary column and ready for queries.
Goal inside PgAdmin: From given data we will figure out sales performace, seller performence, product trends inside sql.

1. Sales performance
    - Total sales of the set
    - Total items sold in the set
    - Avg price
    - How many items sold in precentage from total items listed
    - Revenue by category
    - Revenue by season
2. Seller performance
    - Total per seller
    - Total items sold per seller
    - Avg earing per sold item
    - Sold products per listed (conversion rate)
3. Product trends
    - Best selling categories
    - Top brands
    - Color Trend
    - Material Trend
    - Gender performance
    - Dependancy on condition
    - Season performance




Task 2: Power BI – Analytics Dashboard Prep
Goal: Visualise findings. Add additional insights
Each step has to have its Why it is important and must be understood how it is done.

Task 3: Machine Learning – Feature Engineering & Modeling Prep
Goal: Build a dataset to predict price, sales success, or product desirability.



------------------------------------------------------------------------------------

Task 1: PostgreSQL Clean & Structure the dataset for it.
data_processing.py establishment

---loading data set. Parameter low_memory=False, to load big data set. ---
By default if not False data is checked by chunks which may lead to wrong interpretation of the column category

---Deciding which Columns to keep for SQL base ---

Product_type: filtered out product types that had less than 100 entries //
Prodect_category: New product types for narrow categories from product_type
Product_gender_target: two categories for woman and men.
Product_category:   6 in category, clear distinction. Missing values filled with 'Other'. First thought was dropping those rows out.
Product_season: 2 categories Autum / Winter, Spring / Summer.
Product_condition: 5 categories: Very good condition, never worn, good condition, never worn, with tag, fair condition.
Sold: essential category to see which items were sold.
Available: - if not available remove line. In dataset non missing
In_stock: - if not in stock remove.In dataset non missing
Brand_name: essential category. Unique count 8884. Brands with less than 50 entries 7480.
Product_material. 70 categories. With less than 1000 38, creating category others
Product_color: 30 unique colours


Sales performance

<<Seller characteristics>>
Price_usd
Seller_price
Seller_earning
Seller_country
seller_products_sold
seller_num_products_listed

SQL DROP:
Product_id: No usefull information can be extracted from this.
Product_name: Not for SQL base.
Product_description: Not for SQL base.
Product_keywords: Not for SQL base.
Product_like_count: No usefull information can be extracted from this.
Reserved: No usefull information can be extracted from this.
Should_be_gone: No usefull information can be extracted from this.
brand_id: No usefull information can be extracted from this.
Brand_url: No usefull information can be extracted from this.
Seller_badge: No usefull information can be extracted from this.
Has_cross_border_fees: No usefull information can be extracted from this.
buyers_fees: No usefull information can be extracted from this.
Warehouse_name: No usefull information can be extracted from this.
Seller_id: No usefull information can be extracted from this.
Seller_username: No usefull information can be extracted from this.
Usually_ships_within: No usefull information can be extracted from this.
seller_community_rank: No usefull information can be extracted from this.
Seller_num_followers: No usefull information can be extracted from this.
Seller_pass_rate: No usefull information can be extracted from this.


--- Clean data set. No need for filling empty values, very little amount of NUll entries ---
product_category             1183          0.13
product_material                4          0.00
product_season                  2          0.00
product_color                   1          0.00


------------------------------------------------------------------------------------
Inside PostgreSQL:

Total Sales:
SELECT SUM(Price_usd)
FROM fashion_resale
WHERE Sold = TRUE
2599660

Total items Sold:
SELECT COUNT(Sold)
FROM fashion_resale
WHERE Sold = TRUE
11941

 Avg price
 SELECT
COUNT(Sold) as item_amount,
SUM(Price_usd) as total_sold,
    SUM(Price_usd) / COUNT(Sold) AS avg_price_per_item
FROM fashion_resale
331.54

    - How many items sold in precentage from total items listed
 <<<SQL does not count Bool values>>>
SELECT
	SUM(CASE WHEN Sold = True THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as Sold_precentage
FROM fashion_resale;
1.53%
    - Revenue by category
    Addition
    - Revenue by season
    Addition



Once items are in the server created new table to have only items that were sold.
CREATE TABLE fashion_resale_sold AS
SELECT *
FROM fashion_resale
WHERE sold = TRUE;


Basic insights:
Sell-through rate
SELECT COUNT(*) FILTER (WHERE sold = TRUE)::float / COUNT(*) AS sell_through_rate FROM fashion_resale;
0.0154% which is very low as 890992 rows while sold were 13736 items.
Why it is important? To see the size of the shop and how popular is it.

Most popular brands that were sold:
SELECT brand_name, COUNT(*) AS sold_count
FROM fashion_resale_sold
GROUP BY brand_name
ORDER BY sold_count DESC
LIMIT 10;

"Gucci"	853
"Prada"	527
"Hermès"	348
"Burberry"	338
"Chanel"	329
"Louis Vuitton"	304
"Balenciaga"	289
"Dolce & Gabbana"	288
"Christian Louboutin"	247
"Saint Laurent"	236

In total most popular brands
SELECT brand_name, COUNT(*) AS sold_count
FROM fashion_resale
GROUP BY brand_name
ORDER BY sold_count DESC
LIMIT 10;

"Gucci"	40101
"Burberry"	23932
"Dolce & Gabbana"	21732
"Prada"	20579
"Hermès"	18670
"Louis Vuitton"	18555
"Chanel"	14753
"Nike"	13595
"Valentino Garavani"	10529
"Balenciaga"	10450


Now dependancy on how many items were sold depending on quantity of items:

SELECT
    l.brand_name,
    l.listed_count,
    COALESCE(s.sold_count, 0) AS sold_count,
    ROUND(COALESCE(s.sold_count, 0)::decimal / l.listed_count * 100, 2) AS sold_percentage
FROM
    (SELECT brand_name, COUNT(*) AS listed_count
     FROM fashion_resale
     GROUP BY brand_name
     ORDER BY listed_count DESC
     LIMIT 10) l
LEFT JOIN
    (SELECT brand_name, COUNT(*) AS sold_count
     FROM fashion_resale_sold
     GROUP BY brand_name) s
ON l.brand_name = s.brand_name
ORDER BY l.listed_count DESC;


"brand_name","listed_count","sold_count","sold_percentage"
"Gucci","40101","853","2.13"
"Burberry","23932","338","1.41"
"Dolce & Gabbana","21732","288","1.33"
"Prada","20579","527","2.56"
"Hermès","18670","348","1.86"
"Louis Vuitton","18555","304","1.64"
"Chanel","14753","329","2.23"
"Nike","13595","84","0.62"
"Valentino Garavani","10529","226","2.15"
"Balenciaga","10450","289","2.77"

Why is it important? You can see dependencie if the quantity is equal to item popularity.

SELECT
    product_gender_target,
    COUNT(*) AS count,
    ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM public.fashion_resale_sold), 2) AS percentage
FROM
    public.fashion_resale_sold
WHERE
    product_gender_target IN ('Men', 'Women')
GROUP BY
    product_gender_target;

"product_gender_target"	"count"	"percentage"
"Women"	8453	61.54
"Men"	5283	38.46


SELECT
    product_gender_target,
    product_type,
    count,
    percentage
FROM (
    SELECT
        product_gender_target,
        product_type,
        COUNT(*) AS count,
        ROUND(100.0 * COUNT(*) / SUM(COUNT(*)) OVER (PARTITION BY product_gender_target), 2) AS percentage,
        ROW_NUMBER() OVER (PARTITION BY product_gender_target ORDER BY COUNT(*) DESC) AS rank
    FROM
        public.fashion_resale_sold
    WHERE
        product_gender_target IN ('Men', 'Women')
    GROUP BY
        product_gender_target, product_type
) ranked
WHERE rank <= 5
ORDER BY product_gender_target, count DESC;



"product_gender_target"	"product_type"	"count"	"percentage"
"Men"	"T-shirt"	414	7.84
"Men"	"Shirt"	250	4.73
"Men"	"Leather low trainers"	214	4.05
"Men"	"Sweatshirt"	213	4.03
"Men"	"Jacket"	213	4.03
"Women"	"Leather heels"	374	4.42
"Women"	"Mid-length dress"	284	3.36
"Women"	"Leather trainers"	221	2.61
"Women"	"Leather flats"	198	2.34
"Women"	"Maxi dress"	185	2.19

By far the most popular product for men is T-shirt

