1.Created venv added interpreter / gitignore / license / readme.md
2.Created structure and added raw data.
3.Creating file connect.py to establish connection with DB.
4.Adding data_processing.py to clean the columns
5.Set main to export csv data to postgreSQL.

Main goals:
Task 1: PostgreSQL – Clean & Structure the Dataset
Goal inside Pycharm: Make the dataset clean, have only necessary column and ready for queries.
Goal inside PgAdmin: From given data we will figure out sales performace, seller performence, product trends inside sql.

1. Sales performance
    - Total sales of the set
    - Total items sold in the set
    - Avg price
    - How many items sold in precentage from total items listed
    - Revenue by category
    - Revenue by season
2. Seller performance
    - Total per seller
    - Total items sold per seller
    - Avg earing per sold item
    - Sold products per listed (conversion rate)
3. Product trends
    - Best selling categories
    - Top brands
    - Color Trend
    - Material Trend
    - Gender performance
    - Dependancy on condition
    - Season performance




Task 2: Power BI – Analytics Dashboard Prep
Goal: Visualise findings. Add additional insights
Each step has to have its Why it is important and must be understood how it is done.

Task 3: Machine Learning – Feature Engineering & Modeling Prep
Goal: Build a dataset to predict price, sales success, or product desirability.



------------------------------------------------------------------------------------

Task 1: PostgreSQL Clean & Structure the dataset for it.
data_processing.py establishment

---loading data set. Parameter low_memory=False, to load big data set. ---
By default if not False data is checked by chunks which may lead to wrong interpretation of the column category

---Deciding which Columns to keep for SQL base ---

Product_type: filtered out product types that had less than 100 entries //
Prodect_category: New product types for narrow categories from product_type
Product_gender_target: two categories for woman and men.
Product_category:   6 in category, clear distinction. Missing values filled with 'Other'. First thought was dropping those rows out.
Product_season: 2 categories Autum / Winter, Spring / Summer.
Product_condition: 5 categories: Very good condition, never worn, good condition, never worn, with tag, fair condition.
Sold: essential category to see which items were sold.
Available: - if not available remove line. In dataset non missing
In_stock: - if not in stock remove.In dataset non missing
Brand_name: essential category. Unique count 8884. Brands with less than 50 entries 7480.
Product_material. 70 categories. With less than 1000 38, creating category others
Product_color: 30 unique colours


Sales performance

<<Seller characteristics>>
Seller_id
Price_usd
Seller_price
Seller_earning
Seller_country
seller_products_sold
seller_num_products_listed

SQL DROP:
Product_id: No usefull information can be extracted from this.
Product_name: Not for SQL base.
Product_description: Not for SQL base.
Product_keywords: Not for SQL base.
Product_like_count: No usefull information can be extracted from this.
Reserved: No usefull information can be extracted from this.
Should_be_gone: No usefull information can be extracted from this.
brand_id: No usefull information can be extracted from this.
Brand_url: No usefull information can be extracted from this.
Seller_badge: No usefull information can be extracted from this.
Has_cross_border_fees: No usefull information can be extracted from this.
buyers_fees: No usefull information can be extracted from this.
Warehouse_name: No usefull information can be extracted from this.
Seller_username: No usefull information can be extracted from this.
Usually_ships_within: No usefull information can be extracted from this.
seller_community_rank: No usefull information can be extracted from this.
Seller_num_followers: No usefull information can be extracted from this.
Seller_pass_rate: No usefull information can be extracted from this.


--- Clean data set. No need for filling empty values, very little amount of NUll entries ---
product_category             1183          0.13
product_material                4          0.00
product_season                  2          0.00
product_color                   1          0.00


------------------------------------------------------------------------------------
Inside PostgreSQL:

Total Sales:
SELECT SUM(Price_usd)
FROM fashion_resale
WHERE Sold = TRUE
2599660

Total items Sold:
SELECT COUNT(Sold)
FROM fashion_resale
WHERE Sold = TRUE
11941

 Avg price
 SELECT
COUNT(Sold) as item_amount,
SUM(Price_usd) as total_sold,
    SUM(Price_usd) / COUNT(Sold) AS avg_price_per_item
FROM fashion_resale
331.54

    - How many items sold in precentage from total items listed
 <<<SQL does not count Bool values>>>
SELECT
	SUM(CASE WHEN Sold = True THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as Sold_precentage
FROM fashion_resale;
1.53%

    - Revenue by category

    SELECT Product_category,
	ROUND(SUM(Price_usd)) AS category_revenue
FROM fashion_resale
WHERE Sold = True
GROUP by Product_category


"product_category"	"category_revenue"
"Men Accessories"	176851
"Men Clothing"	509027
"Men Shoes"	334374
"Other"	964
"Women Accessories"	99562
"Women Clothing"	711402
"Women Shoes"	767480

    - Revenue by season

SELECT Product_season,
	ROUND(SUM(Price_usd)) AS category_revenue
FROM fashion_resale
WHERE Sold = True
GROUP by Product_season


"product_season"	"category_revenue"
"All seasons"	2160206
"Autumn / Winter"	255583
"Spring / Summer"	183872

--------------------------------------------------------------------------------------

2. Seller performance
    - Total per seller TOP 10
SELECT Seller_id,
ROUND(SUM(Seller_earning)) as total_earning
From fashion_resale
GROUP BY  Seller_id
ORDER BY total_earning DESC
LIMIT 10

seller_id  total_earning
13276748	5971806
4153869	3621529
6633364	2151672
8580538	1455323
16774308	1411365
22899198	1399727
19227665	1122239
13364481	997200
16465877	989631
11080210	897212


    - Total items sold per seller TOP 10

Had to use MAX as seller_products_sold vary a bit.
That column shows total items sold SUM is not an option.

SELECT Seller_id,
       MAX(seller_products_sold) AS total_sold
FROM fashion_resale
GROUP BY Seller_id
ORDER BY total_sold DESC
LIMIT 10;

"seller_id"	"total_sold"
48600	79738
9071862	38592
6508493	23235
12698884	22552
10056903	15551
9360167	13892
3404357	13148
1760381	11795
4085582	11140
1161554	10812

seller_id   total_sold   Total_earning
9071862	140632425	464646
48600	40656120	110164
10056903	38943838	648859
9360167	33180970	219583
6633364	28159529	2151672
3404357	13251195	223656
8426156	10343083	120164
5679155	9997842	164788
11080210	9666530	897212
15622454	8551590	206554


    - Avg earing per sold item
    - Sold products per listed (conversion rate)